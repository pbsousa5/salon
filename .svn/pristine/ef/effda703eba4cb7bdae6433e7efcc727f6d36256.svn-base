<?php

namespace App\Salon\Repositories;

use App\Salon\Contracts\Repositories\OrderInfoRepositoryInterface;
use App\Salon\OrderInfo;
use App\Salon\OrderProduct;
use Illuminate\Support\Str;

/**
 * 
 * 
 * @desc 订单信息数据仓库
 * @author helei <helei@bnersoft.com>
 * @date 2015年7月29日
 */
class OrderInfoRepository extends BaseRepository implements OrderInfoRepositoryInterface
{
    /**
     * 
     * 创建一个订单信息数据仓库实例
     * @param App\Salon\OrderInfo $order
     * @return void
     */
    public function __construct(OrderInfo $order)
    {
        $this->model = $order;
    }
    
    /**
     * 根据给定的条件，统计有多少条记录
     *
     * @param string $filed 统计的字段
     * @param string $value 字段的值
     * @return integer
     */
    public function countByWhere($filed, $value)
    {
        return $this->model
                        ->where($filed, $value)
                        ->groupBy('consumer_id')
                        ->count();
    }
    
    /**
     * 创建获取更新订单信息
     * 
     * @param OrderInfo $orderInfo 订单信息
     * @param array $inputs 更新或者创建订单的数据
     * @return OrderInfo|null
     */
    protected function saveOrderInfo(OrderInfo $orderInfo, array $inputs)
    {
        if (array_key_exists('trade_no', $inputs)) {
            $orderInfo->trade_no = $inputs['trade_no'];
        }
        if (array_key_exists('consumer_id', $inputs)) {
            $orderInfo->consumer_id = trim($inputs['consumer_id']);
        }
        if (array_key_exists('postscript', $inputs)) {
            $orderInfo->postscript = e(trim($inputs['postscript']));
        }
        if (array_key_exists('order_status', $inputs)) {
            $orderInfo->order_status = $inputs['order_status'];
        }
        if (array_key_exists('pay_status', $inputs)) {
            $orderInfo->pay_status = $inputs['pay_status'];
        }
        if (array_key_exists('review_status', $inputs)) {
            $orderInfo->review_status = $inputs['review_status'];
        }
        if (array_key_exists('consumer_coupon_id', $inputs)) {
            $orderInfo->consumer_coupon_id = $inputs['consumer_coupon_id'];
        }
        if (array_key_exists('coupon_face_fee', $inputs)) {
            $orderInfo->coupon_face_fee = $inputs['coupon_face_fee'];
        }
        if (array_key_exists('bean_amount', $inputs)) {
            $orderInfo->bean_amount = $inputs['bean_amount'];
        }
        if (array_key_exists('bean_fee', $inputs)) {
            $orderInfo->bean_fee = $inputs['bean_fee'];
        }
        if (array_key_exists('pay_fee', $inputs)) {
            $orderInfo->pay_fee = $inputs['pay_fee'];
        }
        if (array_key_exists('total_sign_fee', $inputs)) {
            $orderInfo->total_sign_fee = $inputs['total_sign_fee'];
        }
        if (array_key_exists('original_fee', $inputs)) {
            $orderInfo->original_fee = $inputs['original_fee'];
        }
        if (array_key_exists('advance_time', $inputs)) {
            $orderInfo->advance_time = $inputs['advance_time'];
        }
        if (array_key_exists('pay_name', $inputs)) {
            $orderInfo->pay_name = e(trim($inputs['pay_name']));
        }
        if (array_key_exists('pay_code', $inputs)) {
            $orderInfo->pay_code = trim($inputs['pay_code']);
        }
        if (array_key_exists('re_trade_no', $inputs)) {
            $orderInfo->re_trade_no = trim($inputs['re_trade_no']);
        }
        if (array_key_exists('re_cash_fee', $inputs)) {
            $orderInfo->re_cash_fee = trim($inputs['re_cash_fee']);
        }
        if (array_key_exists('re_payment_time', $inputs)) {
            $orderInfo->re_payment_time = trim($inputs['re_payment_time']);
        }
        if (array_key_exists('consumer_name', $inputs)) {
            $orderInfo->consumer_name = e(trim($inputs['consumer_name']));
        }
        if (array_key_exists('consumer_mobile', $inputs)) {
            $orderInfo->consumer_mobile = trim($inputs['consumer_mobile']);
        }
        if (array_key_exists('consumer_head', $inputs)) {
            $orderInfo->consumer_head = trim($inputs['consumer_head']);
        }
        
        if ($orderInfo->save()) {
            return $orderInfo;
        } else {
            return null;
        }
    }
    
    /**
     * 获取资源列表
     *
     * @param  array $where 查询条件
     * @param  string $order_type 获取的订单类型:1:取消,2:未支付,3:未消费,4:待评价,5:已评价,6:退款(7:退款中,8:已退款,9:退款失败)
     * @param  string $size 分页大小（存在默认值）
     * @return Illuminate\Support\Collection
     */
    public function index($where, $order_type='', $size=10)
    {
        $query = $this->createModel()->newQuery();
        
        $query->with('orderProducts');
        foreach ($where as $field => $value) {
            if (!Str::equals('supplier_id', $field) && !Str::equals('barber_id', $field)) {
                $query->where($field, $value);
            }
        }
        
        // 关联查询
        if (array_key_exists('barber_id', $where)) {
            $query->whereHas('orderProducts', function($q) use ($where){
                $q->where('barber_id', $where['barber_id']);
            });
        }
        // 关联查询
        if (array_key_exists('supplier_id', $where)) {
            $query->where('order_status', '<>', OrderInfo::ORDER_STATUS_DEL_SUPPLIER)
                    ->whereHas('orderProducts', function($q) use ($where){
                        $q->where('supplier_id', $where['supplier_id']);
                    });
        }
        if (array_key_exists('consumer_id', $where)) {
            $query->where('order_status', '<>', OrderInfo::ORDER_STATUS_DEL_CONSUMER);
        }
        
        switch ($order_type) {
            case 1:#取消订单
                $query->where('order_status', OrderInfo::ORDER_STATUS_CANCEL);
                break;
            case 2:#未支付订单
                $query->where('order_status', OrderInfo::ORDER_STATUS_NORMAL)->where('pay_status', 0);
                break;
            case 3:#未消费订单
                $query->where('pay_status', 1)
                        ->whereHas('orderProducts', function($q){
                            $q->where('product_status', OrderProduct::PRODUCT_STATUS_CAN_USE);
                        });
                break;
            case 4:#消费待评价订单
                $query->where('pay_status', 1)->where('review_status', 0)
                        ->whereHas('orderProducts', function($q){
                            $q->where('product_status', OrderProduct::PRODUCT_STATUS_USED);
                        });
                break;
            case 5:#已评价订单
                $query->where('pay_status', 1)->where('review_status', 1);
                break;
            case 6:#退款订单
                $query->where('pay_status', 1)
                        ->whereHas('orderProducts', function($q){
                            $q->where('product_status', OrderProduct::PRODUCT_STATUS_REFUND);
                        });
                break;
        }
        
        return $query->orderBy('updated_at', 'desc')->paginate($size);
    }
    
    /**
     * 存储资源
     *
     * @param  array $inputs 必须传入与存储模型相关的数据
     * @param  string|array $extra 可选额外传入的参数
     * @return Illuminate\Database\Eloquent\Model
     */
    public function store($inputs, $extra='')
    {
        return $this->saveOrderInfo($this->createModel(), $inputs);
    }
    
    /**
     * 获取指定资源
     *
     * @param array $where 获取指定资源
     * @param array|string $extra 可选额外传入的参数
     * @return Illuminate\Database\Eloquent\Model
     */
    public function show($where, $extra='')
    {
        $query = $this->createModel()->newQuery();
        
        foreach ($where as $field => $value) {
            $query->where($field, $value);
        }
        
        return $query->first();
    }
    
    /**
     * 更新指定资源
     *
     * @param array $where 获取指定资源
     * @param  array $inputs 必须传入与更新模型相关的数据
     * @param  string|array $extra 可选额外传入的参数
     * @return void
    */
    public function update($where, $inputs=[], $extra='')
    {
        $orderInfo = $this->show($where);
        return $this->saveOrderInfo($orderInfo, $inputs);
    }
    
    /**
     * 根据订单号，更新数据
     *
     * @param string $trade_no 订单编号
     * @param array $inputs 更新的数据
     * @return integer
     */
    public function updateByTradeNo($trade_no, $inputs)
    {
        $model = $this->show(0, ['trade_no', $trade_no]);
        
        if (array_key_exists('pay_status', $inputs)) {
            $model->pay_status = $inputs['pay_status'];
        }
        if (array_key_exists('pay_name', $inputs)) {
            $model->pay_name = $inputs['pay_name'];
        }
        if (array_key_exists('pay_code', $inputs)) {
            $model->pay_code = $inputs['pay_code'];
        }
        if (array_key_exists('re_trade_no', $inputs)) {
            $model->re_trade_no = $inputs['re_trade_no'];
        }
        if (array_key_exists('re_cash_fee', $inputs)) {
            $model->re_cash_fee = $inputs['re_cash_fee'];
        }
        if (array_key_exists('re_payment_time', $inputs)) {
            $model->re_payment_time = $inputs['re_payment_time'];
        }
        
        $flag = $model->save();
        if (!$flag) {
            return null;
        }
        return $model;
    }
    
}